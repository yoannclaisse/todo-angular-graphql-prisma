# ================ MUTATION ==================

# MUTATION pour créer un user
mutation($user: UserCreateInput!){createOneUser(data: $user){id}}

# MUTATION pour créer une todo ATTENTION: il faut rensigner un id de user
mutation CreateTodo($todoData: TodoCreateInput!) {
  createOneTodo(data: $todoData) {
    id
    title
    description
    completed
    createdAt
    updatedAt
    userId
  }
}

# MUTATION pour update une todo
mutation UpdateTodoTest($updateTodo: TodoUpdateInput!, $filter: TodoWhereUniqueInput!) {
  updateOneTodo(data: $updateTodo, where: $filter){title completed id updatedAt createdAt}
}



# ================ QUERY ==================

# QUERY pour récuprer les infos des users
query getUsersWithTodos{users {id todos{title description user{id}}}}

# QUERY pour les todos par le username
query getTodosByUsername($where: TodoWhereInput){todos(where: $where){id title description user{username}}}

# QUERY qui recup' d'abord le user et les todos qui lui sont affiliées
query getUserByNameWithTodos($input: UserWhereUniqueInput!){getUser(where: $input){username todos{description id title}}}



# ================ QUERY VARIABLES ==================
{"user": {"username": "yoyo2", "email": "test2@gmail.fr", "todos": []}}

# variable pour CreateTodo
{
    { "todoData": 
        {
            "title": "test title",
            "description": "test descriptionnnnnnn",
            "user": {"connect": {"id": 1}}
        },
    }
}

# variable pour UpdateTodoTest
{
    "updateTodo":
    {
        "title": {"set": "I just modify the title"},
        "completed": {"set": true}
    },
    "filter": 
    {
        "id": 1
    }
}

# variable pour getTodosByUsername
{
    "where":
  {
    "user": {"is": {"username": {"equals": "yoyo"}}}
  }
}

# variable d'entrée pour getUserByNameWithTodos
{"input": {"username": "yoyo4"}}